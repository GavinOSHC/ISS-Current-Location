{"version":3,"sources":["components/Globe.js","App.js","index.js"],"names":["Globe","iss","coords","className","projection","geography","geographies","map","geo","fill","stroke","key","rsmKey","coordinates","r","createMarker","App","useState","setIss","useEffect","a","getIss","getIssPosition","interval","setInterval","clearInterval","axios","get","iss_position","data","latitude","longitude","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOA+CeA,G,MAlCD,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACTC,EAAS,CAACD,EAAI,GAAIA,EAAI,IAY5B,OACE,yBAAKE,UAAU,OACb,kBAAC,gBAAD,CAAeC,WAAW,eACxB,kBAAC,cAAD,CAAaC,UAlBnB,2GAmBS,qBAAGC,YACUC,KAAI,SAACC,GAAD,OACd,kBAAC,YAAD,CACEC,KAAK,UACLC,OAAO,UACPC,IAAKH,EAAII,OACTP,UAAWG,UApBJ,SAACN,GACpB,GAAIA,EAAO,GACT,OACE,kBAAC,SAAD,CAAQW,YAAaX,GACnB,4BAAQY,EAAG,EAAGL,KAAK,UAqBpBM,CAAab,O,iBCPPc,EA9BH,WAAO,IAAD,EACMC,mBAAS,IADf,mBACThB,EADS,KACJiB,EADI,KAGhBC,qBAAU,YACY,uCAAG,sBAAAC,EAAA,sEAAkBC,IAAlB,mFAAH,qDACpBC,KACC,IAEHH,qBAAU,WACR,IAAMI,EAAWC,YAAW,sBAAC,sBAAAJ,EAAA,sEAAkBC,IAAlB,mFAA4B,KACzD,OAAO,kBAAMI,cAAcF,MAC1B,IAEH,IAAMF,EAAM,uCAAG,8BAAAD,EAAA,sEAGHM,IAAMC,IAAI,2CAHP,gBAEHC,EAFG,EAEXC,KAAQD,aAGVV,EAAO,CAACU,EAAaE,SAAUF,EAAaG,YAL/B,2CAAH,qDAUZ,OACE,6BACE,kBAAC,EAAD,CAAO9B,IAAKA,MCzBlB+B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.7fab3098.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography,\r\n  Marker,\r\n} from \"react-simple-maps\";\r\n\r\nimport \"../styles/map.css\";\r\n\r\nconst geoUrl =\r\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\nconst Globe = ({ iss }) => {\r\n  const coords = [iss[1], iss[0]];\r\n\r\n  const createMarker = (coords) => {\r\n    if (coords[0]) {\r\n      return (\r\n        <Marker coordinates={coords}>\r\n          <circle r={5} fill=\"#F00\" />\r\n        </Marker>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"map\">\r\n      <ComposableMap projection=\"geoMercator\">\r\n        <Geographies geography={geoUrl}>\r\n          {({ geographies }) =>\r\n            geographies.map((geo) => (\r\n              <Geography\r\n                fill=\"#EAEAEC\"\r\n                stroke=\"#D6D6DA\"\r\n                key={geo.rsmKey}\r\n                geography={geo}\r\n              />\r\n            ))\r\n          }\r\n        </Geographies>\r\n        {createMarker(coords)}\r\n      </ComposableMap>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Globe;\r\n","import React, { useEffect, useState } from \"react\";\nimport Globe from \"./components/Globe\";\nimport axios from \"axios\";\n\nconst App = () => {\n  const [iss, setIss] = useState([]);\n\n  useEffect(() => {\n    const getIssPosition = async () => await getIss();\n    getIssPosition();\n  }, []);\n\n  useEffect(() => {\n    const interval = setInterval(async () => await getIss(), 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const getIss = async () => {\n    const {\n      data: { iss_position },\n    } = await axios.get(\"http://api.open-notify.org/iss-now.json\");\n\n    setIss([iss_position.latitude, iss_position.longitude]);\n  };\n\n  // console.log(iss);\n\n  return (\n    <div>\n      <Globe iss={iss} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}